(def calcHand (fn (list)
    (if (= 10 (car list))
        (+ 10 (car list))
        (+ 50 (car (cdr list)))
    ))
)

(calcHand (0 50))

(let (z (+ 2 3)) (+1 z))

(let (p (+ 2 7) q (+ 2 p)) (+ p q)) 

(def genplus5 (fn () (fn (b) (+ 5 b))))

(def plus5 (genplus5))

(plus5 7)

(def fib (fn (N) (if (= N 0) 1 (if (= N 1) 1 (+ (fib (- N 1)) (fib (- N 2)))))))
(fib 1)
(fib 2)
(fib 4)

(cons 5 (cons 6 ( cons 7 8) ) )


(def updateScore (fn (score oneCount)
  (if (> oneCount 0) 
    (if (> score 21)
      (updateScore (- score 10) (- oneCount 1))
      score)
    score)
))

(def nextCard (fn (hand)
    (car hand)
))


(def twoOr10? (fn (card)
    (if (> card 1)
      (if (< card 11 ) true false)
      false)
))

(def calcHand (fn (hand score oneCount)

    (if (nil? hand)
      (if (> score 21)
        (updateScore score oneCount) 
        score)

      (if (= 1 (nextCard hand))
        (calcHand (cdr hand) (+ score 11) (+ 1 oneCount))

        (if (twoOr10? (nextCard hand))
          (calcHand (cdr hand) (+ score (nextCard hand)) oneCount)

          (calcHand (cdr hand) (+ score 10) oneCount)))
    )
  ))


(def blackjack (fn (hand)
  (calcHand hand 0 0)
))

(blackjack (1))
(blackjack (1 11))
(blackjack (1 1 1 13))
(blackjack (10 5 1))


